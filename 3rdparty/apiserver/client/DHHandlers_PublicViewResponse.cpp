/**
 * Deepin官网
 * deepin的官方网站后台接口
 *
 * The version of the OpenAPI document: 1.0
 * Contact: wurongjie@deepin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "DHHandlers_PublicViewResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "DHHelpers.h"

namespace DeepinHomeAPI {

DHHandlers_PublicViewResponse::DHHandlers_PublicViewResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

DHHandlers_PublicViewResponse::DHHandlers_PublicViewResponse() {
    this->initializeModel();
}

DHHandlers_PublicViewResponse::~DHHandlers_PublicViewResponse() {}

void DHHandlers_PublicViewResponse::initializeModel() {

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void DHHandlers_PublicViewResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void DHHandlers_PublicViewResponse::fromJsonObject(QJsonObject json) {

    m_public_id_isValid = ::DeepinHomeAPI::fromJsonValue(public_id, json[QString("public_id")]);
    m_public_id_isSet = !json[QString("public_id")].isNull() && m_public_id_isValid;

    m_view_count_isValid = ::DeepinHomeAPI::fromJsonValue(view_count, json[QString("view_count")]);
    m_view_count_isSet = !json[QString("view_count")].isNull() && m_view_count_isValid;
}

QString DHHandlers_PublicViewResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject DHHandlers_PublicViewResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_public_id_isSet) {
        obj.insert(QString("public_id"), ::DeepinHomeAPI::toJsonValue(public_id));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("view_count"), ::DeepinHomeAPI::toJsonValue(view_count));
    }
    return obj;
}

QString DHHandlers_PublicViewResponse::getPublicId() const {
    return public_id;
}
void DHHandlers_PublicViewResponse::setPublicId(const QString &public_id) {
    this->public_id = public_id;
    this->m_public_id_isSet = true;
}

bool DHHandlers_PublicViewResponse::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool DHHandlers_PublicViewResponse::is_public_id_Valid() const{
    return m_public_id_isValid;
}

qint32 DHHandlers_PublicViewResponse::getViewCount() const {
    return view_count;
}
void DHHandlers_PublicViewResponse::setViewCount(const qint32 &view_count) {
    this->view_count = view_count;
    this->m_view_count_isSet = true;
}

bool DHHandlers_PublicViewResponse::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool DHHandlers_PublicViewResponse::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool DHHandlers_PublicViewResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool DHHandlers_PublicViewResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace DeepinHomeAPI
